ms523_2 = c(ms523_2[,9], rep(NA,1000))
ms523_2 = ms523_2 [1:max_length]
paranodes_mean29<-mean(ms523_2)
paranodes_sd29<-sd(ms523_2)
paranodes_median29<-median(ms523_2)
ms530_1<-read.csv("ms530_1.csv",header=TRUE)
ms530_1 = c(ms530_1[,9], rep(NA,1000))
ms530_1 = ms530_1 [1:max_length]
paranodes_mean32<-mean(ms530_1)
paranodes_sd32<-sd(ms530_1)
paranodes_median32<-median(ms530_1)
ms530_2<-read.csv("ms530_2.csv",header=TRUE)
ms530_2 = c(ms530_2[,9], rep(NA,1000))
ms530_2 = ms530_2 [1:max_length]
paranodes_mean31<-mean(ms530_2)
paranodes_sd31<-sd(ms530_2)
paranodes_median31<-median(ms530_2)
ms535_1<-read.csv("ms535_1.csv",header=TRUE)
ms535_1 = c(ms535_1[,9], rep(NA,1000))
ms535_1 = ms535_1 [1:max_length]
paranodes_mean11<-mean(ms535_1)
paranodes_sd11<-sd(ms535_1)
paranodes_median11<-median(ms535_1)
ms535_2<-read.csv("ms535_2.csv",header=TRUE)
ms535_2 = c(ms535_2[,9], rep(NA,1000))
ms535_2 = ms535_2 [1:max_length]
paranodes_mean10<-mean(ms535_2)
paranodes_sd10<-sd(ms535_2)
paranodes_median10<-median(ms535_2)
ms542_1<-read.csv("ms542_1.csv",header=TRUE)
ms542_1 = c(ms542_1[,9], rep(NA,1000))
ms542_1 = ms542_1 [1:max_length]
paranodes_mean24<-mean(ms542_1)
paranodes_sd24<-sd(ms542_1)
paranodes_median24<-median(ms542_1)
ms549_2<-read.csv("ms549_2.csv",header=TRUE)
ms549_2 = c(ms549_2[,9], rep(NA,1000))
ms549_2 = ms549_2 [1:max_length]
paranodes_mean18<-mean(ms549_2)
paranodes_sd18<-sd(ms549_2)
paranodes_median18<-median(ms549_2)
ms567_1<-read.csv("ms567_1.csv",header=TRUE)
ms567_1 = c(ms567_1[,9], rep(NA,1000))
ms567_1 = ms567_1 [1:max_length]
paranodes_mean22<-mean(ms567_1)
paranodes_sd22<-sd(ms567_1)
paranodes_median22<-median(ms567_1)
ms567_2<-read.csv("ms567_2.csv",header=TRUE)
ms567_2 = c(ms567_2[,9], rep(NA,1000))
ms567_2 = ms567_2 [1:max_length]
paranodes_mean23<-mean(ms567_2)
paranodes_sd23<-sd(ms567_2)
paranodes_median23<-median(ms567_2)
ms584_1<-read.csv("ms584_1.csv",header=TRUE)
ms584_1 = c(ms584_1[,9], rep(NA,1000))
ms584_1 = ms584_1 [1:max_length]
paranodes_mean14<-mean(ms584_1)
paranodes_sd14<-sd(ms584_1)
paranodes_median14<-median(ms584_1)
ms584_2<-read.csv("ms584_2.csv",header=TRUE)
ms584_2 = c(ms584_2[,9], rep(NA,1000))
ms584_2 = ms584_2 [1:max_length]
paranodes_mean15<-mean(ms584_2,na.rm=TRUE)
paranodes_sd15<-sd(ms584_2,na.rm=TRUE)
paranodes_median15<-median(ms584_2,na.rm=TRUE)
ms585_1<-read.csv("ms585_1.csv",header=TRUE)
ms585_1 = c(ms585_1[,9], rep(NA,1000))
ms585_1 = ms585_1 [1:max_length]
paranodes_mean34<-mean(ms585_1)
paranodes_sd34<-sd(ms585_1)
paranodes_median34<-median(ms585_1)
ms585_2<-read.csv("ms585_2.csv",header=TRUE)
ms585_2 = c(ms585_2[,9], rep(NA,1000))
ms585_2 = ms585_2 [1:max_length]
paranodes_mean33<-mean(ms585_2)
paranodes_sd33<-sd(ms585_2)
paranodes_median33<-median(ms585_2)
ms587_1<-read.csv("ms587_1.csv",header=TRUE)
ms587_1 = c(ms587_1[,9], rep(NA,1000))
ms587_1 = ms587_1 [1:max_length]
paranodes_mean21<-mean(ms587_1)
paranodes_sd21<-sd(ms587_1)
paranodes_median21<-median(ms587_1)
paranodal_mean=c(paranodes_mean1,paranodes_mean2,paranodes_mean3,paranodes_mean4,paranodes_mean5,paranodes_mean6,
paranodes_mean7,paranodes_mean8,paranodes_mean9,paranodes_mean10,paranodes_mean11,paranodes_mean12,
paranodes_mean13,paranodes_mean14,paranodes_mean15,paranodes_mean16,paranodes_mean17,paranodes_mean18,
paranodes_mean19,paranodes_mean20,paranodes_mean21,paranodes_mean22,paranodes_mean23,paranodes_mean24,
paranodes_mean25,paranodes_mean26,paranodes_mean27,paranodes_mean28,paranodes_mean29,paranodes_mean30,
paranodes_mean31,paranodes_mean32,paranodes_mean33,paranodes_mean34)
paranodal_median=c(paranodes_median1,paranodes_median2,paranodes_median3,paranodes_median4,
paranodes_median5,paranodes_median6,
paranodes_median7,paranodes_median8,paranodes_median9,paranodes_median10,
paranodes_median11,paranodes_median12,
paranodes_median13,paranodes_median14,paranodes_median15,
paranodes_median16,paranodes_median17,paranodes_median18,
paranodes_median19,paranodes_median20,paranodes_median21,
paranodes_median22,paranodes_median23,paranodes_median24,
paranodes_median25,paranodes_median26,paranodes_median27,
paranodes_mean28,paranodes_mean29,paranodes_mean30,
paranodes_median31,paranodes_median32,paranodes_median33,paranodes_median34)
paranodal_sd=c(paranodes_sd1,paranodes_sd2,paranodes_sd3,paranodes_sd4,paranodes_sd5,paranodes_sd6,paranodes_sd7,
paranodes_sd8,paranodes_sd9,paranodes_sd10,paranodes_sd11,paranodes_sd12,paranodes_sd13,
paranodes_sd14,paranodes_sd15,paranodes_sd16,paranodes_sd17,paranodes_sd18,paranodes_sd19,
paranodes_sd20,paranodes_sd21,paranodes_sd22,paranodes_sd23,paranodes_sd24,paranodes_sd25,
paranodes_sd26,paranodes_sd27,paranodes_sd28,paranodes_sd29,paranodes_sd30,paranodes_sd31,
paranodes_sd32,paranodes_sd33,paranodes_sd34)
paranodal_se=paranodal_sd/sqrt(200)
hla=c(2.99,2.11,3.52,4.04,3.71,2.73,1.59,2.83,3.75,3.08,3.411,3.67,4.69,5.35,
2.46,1.20,2.69,3.38,2.36,3.55,2.81,2.6,3.5,3.63,3.53,3.13,2.07,2.87,2.82,3.33,3.96,2.73,2.45,2.14)
hla_sd= c(0.36,1.04,1.38,1.14,1.02,1.64,0.3,0.55,0.66,1.98,1.120,1.55,1.38,2.4,0.5,0.86,1.3,1.32,0.59,
1.47,0.93,0.49,0.8,1.28,2.69,1.36,1.57,0.65,1.22, 1.53,1.46,1.029,1.25,0.66)
hla_se= hla_sd/sqrt(10)
age=c(43,43,50,50,38,38,49,63,63,65,65,55,55,42,42,65,65,50,58,61,58,45,45,
76,48,48,62,62,63,63,42,42,53,53)
duration=c(21,21,29,29,22,22,20,39,39,40,40,34,34 ,12,12,36,36,29,NaN,29,20,23,23,35,25,25,
42,42,32,32,21,21,27,27)
hla_datastructure=data.frame("hla"=hla,"paranodal_mean"=paranodal_mean,"paranodal_se"=paranodal_se,
"hla_sd"=hla_sd, "hla_se"=hla_se,
"duration"=duration, "paranodal median"=paranodal_median,"age"=age)
lengths = cbind(C48_1,C54_1, C54_2, C72_1,C72_2,C74_1,C74_2,C75_1,C75_2,C76_1,C76_2,pdc29_1,pdc29_2,
pdc39_2,pdc40_1,pdc40_2)
Controls = c(C48_1,C54_1, C54_2, C72_1,C72_2,C74_1,C74_2,C75_1,C75_2,C76_1,C76_2,pdc29_1,pdc29_2,
pdc39_2,pdc40_1,pdc40_2)
Controls=c(Controls,rep(NA,1000))
Controls=Controls[1:6800]
MSPatients = c(ms404_1,ms404_2,ms406_1,ms406_2,ms411_2,ms422_2,ms444_1,ms461_1,ms461_2,ms466_1,
ms466_2,ms478_1,ms478_2,
ms500_1,ms500_2,ms510_1,ms510_2,ms517_1,ms517_2,
ms523_1,ms523_2, ms530_1,ms530_2,ms549_2,ms567_1,ms567_2,ms584_1,ms584_2,
ms535_1,ms535_2,ms542_1,
ms585_1,ms585_2, ms587_1)
#mean(MSPatients,na.rm=T)
#sd(MSPatients,na.rm=T)/sqrt(6800)
#median(MSPatients,na.rm=T)
#median(Controls,na.rm=T)
total_lengths=cbind(Controls,MSPatients,nf155_patients,nf155_controls)
total_lengths = as.data.frame(total_lengths)
#ggplot2, we need to convert the data to a data frame.
tot=c(total_lengths[,1],total_lengths[,2], total_lengths[,3],total_lengths[,4])
type=c(rep("Control Caspr",nrow(total_lengths)),rep("MS Caspr",nrow(total_lengths)),
rep("MS NF155",nrow(total_lengths)),rep("Control NF155",nrow(total_lengths)))
dat=data.frame("Class"=type,"Length"=tot)
dat = dat[!is.na(dat$Length),]
lengths = cbind(C48_1,C54_1, C54_2, C72_1,C72_2,C74_1,C74_2,C75_1,C75_2,C76_1,C76_2,pdc29_1,pdc29_2,
pdc39_2,pdc40_1,pdc40_2)
Controls = c(C48_1,C54_1, C54_2, C72_1,C72_2,C74_1,C74_2,C75_1,C75_2,C76_1,C76_2,pdc29_1,pdc29_2,
pdc39_2,pdc40_1,pdc40_2)
Controls=c(Controls,rep(NA,1000))
Controls=Controls[1:6800]
MSPatients = c(ms404_1,ms404_2,ms406_1,ms406_2,ms411_2,ms422_2,ms444_1,ms461_1,ms461_2,ms466_1,
ms466_2,ms478_1,ms478_2,
ms500_1,ms500_2,ms510_1,ms510_2,ms517_1,ms517_2,
ms523_1,ms523_2, ms530_1,ms530_2,ms549_2,ms567_1,ms567_2,ms584_1,ms584_2,
ms535_1,ms535_2,ms542_1,
ms585_1,ms585_2, ms587_1)
total_lengths=cbind(Controls,MSPatients,nf155_patients,nf155_controls)
total_lengths = as.data.frame(total_lengths)
total_lengths=cbind(Controls,MSPatients)
total_lengths = as.data.frame(total_lengths)
tot=c(total_lengths[,1],total_lengths[,2])
type=c(rep("Control Caspr",nrow(total_lengths)),rep("MS Caspr",nrow(total_lengths)))
dat=data.frame("Class"=type,"Length"=tot)
dat = dat[!is.na(dat$Length),]
View(dat)
View(total_lengths)
for (i in 1:6800){
if (total_lengths$MSPatients[i]<2){
patients_lesstwo<-c(total_lengths$MSPatients[i])
}
}
total_lengths$MSPatients(8)
total_lengths$MSPatients[i]
total_lengths$MSPatients[8]
for (i in 1:6800){
if (total_lengths$MSPatients[i]<2){
patients_lesstwo<-c(total_lengths$MSPatients[i])
}
}
for (i in c(1:6800){
if (total_lengths$MSPatients[i]<2){
patients_lesstwo<-c(total_lengths$MSPatients[i])
}
}
View(total_lengths)
write.csv(total_lengths, "caspr-meor.csv")
write.table(total_lengths, caspr_meor.txt, sep="\t")
write.csv(total_lengths, caspr_meor.csv, sep=" ")
write.csv(total_lengths, caspr_meor.csv, sep="\t ")
write.csv(total_lengths, "caspr_meor.csv", sep="\t")
write.table(total_lengths, "caspr_meor.txt", sep="\t")
write.table(total_lengths, "caspr_meor.txt", rownames=F)
total_lengths=cbind(Controls,MSPatients)
total_lengths = as.data.frame(total_lengths)
tot=c(total_lengths[,1],total_lengths[,2])
write.table(total_lengths, "caspr_meor.txt", rownames=F)
type=c(rep("Control Caspr",nrow(total_lengths)),rep("MS Caspr",nrow(total_lengths)))
dat=data.frame("Class"=type,"Length"=tot)
dat = dat[!is.na(dat$Length),]
a=data.frame()
b=0
c=0
d=0
for (i in c(total_lengths$MSPatients)){
if (i<2){
a=dat[]
menosquedos=rbind(menosquedos,a)
}
else if (i>=2 && i<4){
b=b+1
}
else if (i>=4 && i<6){
c=dat[dat$Length==i,]
menosqueseis=rbind(menosqueseis, b)
}
else (i>=6){
d=dat[dat$Length==i,]
masqueseis=rbind(masqueseis, d)
}
}
a=data.frame()
b=0
c=0
d=0
for (i in c(total_lengths$MSPatients)){
if (i<2){
a=dat[]
menosquedos=rbind(menosquedos,a)
}
else if (i>=2 && i<4){
b=b+1
}
else if (i>=4 && i<6){
c=dat[dat$Length==i,]
menosqueseis=rbind(menosqueseis, b)
}
else (i>=6){
d=dat[dat$Length==i,]
masqueseis=rbind(masqueseis, d)
}
}
a=data.frame()
b=0
c=0
d=0
menosquedos=c()
for (i in c(total_lengths$MSPatients)){
if (i<2){
a=total_lengths[]
menosquedos=rbind(menosquedos,a)
}
}
a=data.frame()
b=0
c=0
d=0
menosquedos=c()
for (i in c(total_lengths$MSPatients)){
if (i<=2){
a=total_lengths[]
menosquedos=rbind(menosquedos,a)
}
}
rm(list =ls())
gc()
overall.wd = "C:/Users/Patricia/Desktop/Measurements/patients_K/"
setwd(overall.wd)
file.list1 = list.files(path = ".") # list of all files, "." means we are here in this path
file.len1 = length(file.list1)
library(ggplot2)
total.data1 = c()
for(f in 1:file.len1){
print(f)
# get all files:
setwd(paste0(overall.wd,file.list1[f])) #this just gives the path, when f=1 we are in C14
folder.list1 = list.files(path = ".") # list of all files
folder.len1 = length(folder.list1)
for(i in 1:folder.len1){
cat("i =", i, "\n")
data1 = read.csv(folder.list1[i],header = TRUE)
clean.data1 = data.frame('X0' = data1$X0,'Y0'= data1$Y0,'Y1'= data1$Y1,'Y2'= data1$Y2)
total.data1 = rbind(clean.data1, total.data1)
}
}
total.data1=total.data1
minus1 = abs(total.data1$Y0 - total.data1$Y2)
thresholdseq1=seq(0, max(max(total.data1$Y0),max(total.data1$Y2)),1.5)
cushion1=10000
overlaps1 = c()
tmin1 = 25
for (j in thresholdseq1){
# for each threshold do:
pair.store1 = c() # store pairs of start/end here
count = 1 # start looking from first entry onwards
ovlps1 = length(minus1[minus1 <= j & total.data1$Y0 > tmin1 & total.data1$Y2 > tmin1])/length(minus1)
overlaps1 = c(overlaps1, ovlps1)
}
proportion_dataframe<-data.frame("proportion_overlap_patient"=overlaps1, "proportion_overlap_control"=overlaps2,"threshold"=thresholdseq1)
overall.wd = "C:/Users/Patricia/Desktop/Measurements/controls_K/"
setwd(overall.wd)
file.list2 = list.files(path = ".") # list of all files, "." means we are here in this path
file.len2 = length(file.list2)
#I want to create a function that for each case I have (16), gives me different thresholds
#the degree of overlapping, so for each threshold we have different overlaps of different lengths.
# so we will have a graph in each case, in the x the threshold and for each point, different
#points of overlap length
total.data2 = c()
for(f in 1:file.len2){
print(f)
# get all files:
setwd(paste0(overall.wd,file.list2[f])) #this just gives the path, when f=1 we are in C14
folder.list2 = list.files(path = ".") # list of all files
folder.len2 = length(folder.list2) # number of files
for(i in 1:folder.len2){
cat("i =", i, "\n")
data2 = read.csv(folder.list2[i],header = TRUE)
clean.data2 = data.frame('X0' = data2$X0,'Y0'= data2$Y0,'Y1'= data2$Y1,'Y2'= data2$Y2)
total.data2 = rbind(clean.data2, total.data2)
}
}
total.data2=total.data2
#total.data2=total.data2/2
#total.data2=total.data2*2
#types of noralization
#establishing the overlap method
minus2 = abs(total.data2$Y0 - total.data2$Y2)
thresholdseq2=seq(0, max(max(total.data2$Y0),max(total.data2$Y2)),1.5)
cushion2=10000
overlaps2 = c()
tmin2 = 25
for (j in thresholdseq2){
# for each threshold do:
pair.store2 = c() # store pairs of start/end here
count = 1 # start looking from first entry onwards
ovlps2 = length(minus2[minus2 <= j & total.data2$Y0 > tmin2 & total.data2$Y2 > tmin2])/length(minus2)
overlaps2 = c(overlaps2, ovlps2)
}
proportion_dataframe<-data.frame("proportion_overlap_patient"=overlaps1, "proportion_overlap_control"=overlaps2,"threshold"=thresholdseq1)
View(proportion_dataframe)
View(total.data1)
rm(list =ls())
gc()
overall.wd = "C:/Users/Patricia/Desktop/Measurements/patients_K/"
setwd(overall.wd)
file.list1 = list.files(path = ".") # list of all files, "." means we are here in this path
file.len1 = length(file.list1)
library(ggplot2)
#I want to create a function that for each case I have (16), gives me different thresholds
#the degree of overlapping, so for each threshold we have different overlaps of different lengths.
# so we will have a graph in each case, in the x the threshold and for each point, different
#points of overlap length.
total.data1 = c()
for(f in 1:file.len1){
print(f)
# get all files:
setwd(paste0(overall.wd,file.list1[f])) #this just gives the path, when f=1 we are in C14
folder.list1 = list.files(path = ".") # list of all files
folder.len1 = length(folder.list1)
for(i in 1:folder.len1){
cat("i =", i, "\n")
data1 = read.csv(folder.list1[i],header = TRUE)
clean.data1 = data.frame('X0' = data1$X0,'Y0'= data1$Y0,'Y1'= data1$Y1,'Y2'= data1$Y2, "case"=i)
total.data1 = rbind(clean.data1, total.data1)
}
}
total.data1=total.data1
View(total.data1)
for(f in 1:file.len1){
print(f)
# get all files:
setwd(paste0(overall.wd,file.list1[f])) #this just gives the path, when f=1 we are in C14
folder.list1 = list.files(path = ".") # list of all files
folder.len1 = length(folder.list1)
for(i in 1:folder.len1){
cat("i =", i, "\n")
data1 = read.csv(folder.list1[i],header = TRUE)
clean.data1 = data.frame('X0' = data1$X0,'Y0'= data1$Y0,'Y1'= data1$Y1,'Y2'= data1$Y2, "case"=f)
total.data1 = rbind(clean.data1, total.data1)
}
}
total.data1=total.data1
View(total.data1)
minus1 = abs(total.data1$Y0 - total.data1$Y2)
thresholdseq1=seq(0, max(max(total.data1$Y0),max(total.data1$Y2)),1.5)
cushion1=10000
overlaps1 = c()
tmin1 = 25
patient_data=data.frame("proportion_overlap_patient"=overlaps1, "case"=total.data1$case,"threshold"=thresholdseq1)
patient_data=data.frame("proportion_overlap_patient"=overlaps1, "case"=total.data1$case)
gc()
overall.wd = "C:/Users/Patricia/Desktop/Measurements/patients_K/"
setwd(overall.wd)
file.list1 = list.files(path = ".") # list of all files, "." means we are here in this path
file.len1 = length(file.list1)
library(ggplot2)
#I want to create a function that for each case I have (16), gives me different thresholds
#the degree of overlapping, so for each threshold we have different overlaps of different lengths.
# so we will have a graph in each case, in the x the threshold and for each point, different
#points of overlap length.
total.data1 = c()
for(f in 1:file.len1){
print(f)
# get all files:
setwd(paste0(overall.wd,file.list1[f])) #this just gives the path, when f=1 we are in C14
folder.list1 = list.files(path = ".") # list of all files
folder.len1 = length(folder.list1)
for(i in 1:folder.len1){
cat("i =", i, "\n")
data1 = read.csv(folder.list1[i],header = TRUE)
clean.data1 = data.frame('X0' = data1$X0,'Y0'= data1$Y0,'Y1'= data1$Y1,'Y2'= data1$Y2, "case"=f)
total.data1 = rbind(clean.data1, total.data1)
}
}
total.data1=total.data1
#establishing the overlap method
minus1 = abs(total.data1$Y0 - total.data1$Y2)
thresholdseq1=seq(0, max(max(total.data1$Y0),max(total.data1$Y2)),1.5)
cushion1=10000
overlaps1 = c()
tmin1 = 25
for (j in thresholdseq1){
# for each threshold do:
pair.store1 = c() # store pairs of start/end here
count = 1 # start looking from first entry onwards
ovlps1 = length(minus1[minus1 <= j & total.data1$Y0 > tmin1 & total.data1$Y2 > tmin1])/length(minus1)
overlaps1 = c(overlaps1, ovlps1)
}
proportion_dataframe<-data.frame("proportion_overlap_patient"=overlaps1, "proportion_overlap_control"=overlaps2,"threshold"=thresholdseq1)
overall.wd = "C:/Users/Patricia/Desktop/Measurements/controls_K/"
setwd(overall.wd)
file.list2 = list.files(path = ".") # list of all files, "." means we are here in this path
file.len2 = length(file.list2)
#I want to create a function that for each case I have (16), gives me different thresholds
#the degree of overlapping, so for each threshold we have different overlaps of different lengths.
# so we will have a graph in each case, in the x the threshold and for each point, different
#points of overlap length
total.data2 = c()
for(f in 1:file.len2){
print(f)
# get all files:
setwd(paste0(overall.wd,file.list2[f])) #this just gives the path, when f=1 we are in C14
folder.list2 = list.files(path = ".") # list of all files
folder.len2 = length(folder.list2) # number of files
for(i in 1:folder.len2){
cat("i =", i, "\n")
data2 = read.csv(folder.list2[i],header = TRUE)
clean.data2 = data.frame('X0' = data2$X0,'Y0'= data2$Y0,'Y1'= data2$Y1,'Y2'= data2$Y2)
total.data2 = rbind(clean.data2, total.data2)
}
}
total.data2=total.data2
#total.data2=total.data2/2
#total.data2=total.data2*2
#types of noralization
#establishing the overlap method
minus2 = abs(total.data2$Y0 - total.data2$Y2)
thresholdseq2=seq(0, max(max(total.data2$Y0),max(total.data2$Y2)),1.5)
cushion2=10000
overlaps2 = c()
tmin2 = 25
for (j in thresholdseq2){
# for each threshold do:
pair.store2 = c() # store pairs of start/end here
count = 1 # start looking from first entry onwards
ovlps2 = length(minus2[minus2 <= j & total.data2$Y0 > tmin2 & total.data2$Y2 > tmin2])/length(minus2)
overlaps2 = c(overlaps2, ovlps2)
}
n<-ggplot(aes(x=threshold,y=proportion_overlap_patient),data=proportion_dataframe)+
geom_line(aes(colour="Patient"),size=1,alpha=0.7)+
geom_line(aes(x=threshold,y=proportion_overlap_control,colour="Control"),data=proportion_dataframe,size=1,alpha=0.7)+
theme_bw()+
xlab("Threshold")+
ylab("Proportion of overlapping regions")+
ggtitle("Proportion of Kv1.2-Caspr overlap")+
scale_color_manual(name="Legend", values=c(Patient="blue",Control="red"))+
theme(axis.line = element_line(size = 4))+
theme(text = element_text(size=18))+
theme(axis.line=element_line(color="black",size=1,linetype="solid"),plot.title = element_text(hjust = 0.5))+
scale_x_continuous(expand=c(0,0))+scale_y_continuous(expand=c(0,0))
print(n)
proportion_dataframe<-data.frame("proportion_overlap_patient"=overlaps1, "proportion_overlap_control"=overlaps2,"threshold"=thresholdseq1)
n<-ggplot(aes(x=threshold,y=proportion_overlap_patient),data=proportion_dataframe)+
geom_line(aes(colour="Patient"),size=1,alpha=0.7)+
geom_line(aes(x=threshold,y=proportion_overlap_control,colour="Control"),data=proportion_dataframe,size=1,alpha=0.7)+
theme_bw()+
xlab("Threshold")+
ylab("Proportion of overlapping regions")+
ggtitle("Proportion of Kv1.2-Caspr overlap")+
scale_color_manual(name="Legend", values=c(Patient="blue",Control="red"))+
theme(axis.line = element_line(size = 4))+
theme(text = element_text(size=18))+
theme(axis.line=element_line(color="black",size=1,linetype="solid"),plot.title = element_text(hjust = 0.5))+
scale_x_continuous(expand=c(0,0))+scale_y_continuous(expand=c(0,0))
print(n)
patient_data=data.frame("proportion_overlap_patient"=overlaps1, "case"=total.data1$case)
proportion_dataframe<-data.frame("proportion_overlap_patient"=overlaps1, "proportion_overlap_control"=overlaps2,"threshold"=thresholdseq1)
n<-ggplot(aes(x=threshold,y=proportion_overlap_patient),data=proportion_dataframe)+
geom_line(aes(colour="Patient"),size=1,alpha=0.7)+
geom_line(aes(x=threshold,y=proportion_overlap_control,colour="Control"),data=proportion_dataframe,size=1,alpha=0.7)+
theme_bw()+
xlab("Threshold")+
ylab("Proportion of overlapping regions")+
ggtitle("Proportion of Kv1.2-Caspr overlap")+
scale_color_manual(name="Legend", values=c(Patient="blue",Control="red"))+
theme(axis.line = element_line(size = 4))+
theme(text = element_text(size=18))+
theme(axis.line=element_line(color="black",size=1,linetype="solid"),plot.title = element_text(hjust = 0.5))+
scale_x_continuous(expand=c(0,0))+scale_y_continuous(expand=c(0,0))
print(n)
-ggplot(aes(x=threshold,y=proportion_overlap_patient),data=proportion_dataframe)+
geom_line(aes(colour="Patient"),size=1,alpha=0.7)
ggplot(aes(x=threshold,y=proportion_overlap_patient),data=proportion_dataframe)+
geom_line(aes(colour="Patient"),size=1,alpha=0.7)
